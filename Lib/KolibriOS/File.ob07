(*
    Copyright 2013 Krotov Anton

    This program is free software: you can redistribute it and/or modify
    it under the terms of the GNU Lesser General Public License as published by
    the Free Software Foundation, either version 3 of the License, or
    (at your option) any later version.

    This program is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    GNU Lesser General Public License for more details.

    You should have received a copy of the GNU Lesser General Public License
    along with this program.  If not, see <http://www.gnu.org/licenses/>.
*)

MODULE File;

IMPORT FSys, sys := SYSTEM, KOSAPI;

CONST

  SEEK_BEG* = 0; SEEK_CUR* = 1; SEEK_END* = 2;

VAR fd: FSys.rFD; fs: FSys.rFS;

PROCEDURE Exists*(FName: ARRAY OF CHAR): BOOLEAN;
BEGIN
  RETURN FSys.GetFileInfo(FName, fd) & ~(4 IN BITS(fd.attr))
END Exists;

PROCEDURE Close*(VAR F: FSys.FS);
BEGIN
  IF F # NIL THEN
    DISPOSE(F)
  END
END Close;

PROCEDURE Open*(FName: ARRAY OF CHAR): FSys.FS;
VAR F: FSys.FS;
BEGIN
  IF Exists(FName) THEN
    NEW(F);
    IF F # NIL THEN
      F.subfunc := 0;
      F.pos := 0;
      F.hpos := 0;
      F.bytes := 0;
      F.buffer := 0;
      COPY(FName, F.name)
    END
  ELSE
    F := NIL
  END
  RETURN F
END Open;

PROCEDURE Delete*(FName: ARRAY OF CHAR): BOOLEAN;
VAR F: FSys.FS; res, res2: INTEGER;
BEGIN
  IF Exists(FName) THEN
    NEW(F);
    IF F # NIL THEN
      F.subfunc := 8;
      F.pos := 0;
      F.hpos := 0;
      F.bytes := 0;
      F.buffer := 0;
      COPY(FName, F.name);
      res := KOSAPI.sysfunc22(70, sys.ADR(F^), res2);
      DISPOSE(F)
    ELSE
      res := -1
    END
  ELSE
    res := -1
  END
  RETURN res = 0
END Delete;

PROCEDURE Seek*(F: FSys.FS; Offset, Origin: INTEGER): INTEGER;
VAR res: INTEGER;
BEGIN
  IF (F # NIL) & FSys.GetFileInfo(F.name, fd) & (BITS(fd.attr) * {4} = {}) THEN
    CASE Origin OF
    |SEEK_BEG: F.pos := Offset
    |SEEK_CUR: F.pos := F.pos + Offset
    |SEEK_END: F.pos := fd.size + Offset
    ELSE
    END;
    res := F.pos
  ELSE
    res := -1
  END
  RETURN res
END Seek;

PROCEDURE Read*(F: FSys.FS; Buffer, Count: INTEGER): INTEGER;
VAR res, res2: INTEGER;
BEGIN
  IF F # NIL THEN
    F.subfunc := 0;
    F.bytes := Count;
    F.buffer := Buffer;
    res := KOSAPI.sysfunc22(70, sys.ADR(F^), res2);
    IF res2 > 0 THEN
      F.pos := F.pos + res2
    END
  ELSE
    res2 := 0
  END
  RETURN res2
END Read;

PROCEDURE Write*(F: FSys.FS; Buffer, Count: INTEGER): INTEGER;
VAR res, res2: INTEGER;
BEGIN
  IF F # NIL THEN
    F.subfunc := 3;
    F.bytes := Count;
    F.buffer := Buffer;
    res := KOSAPI.sysfunc22(70, sys.ADR(F^), res2);
    IF res2 > 0 THEN
      F.pos := F.pos + res2
    END
  ELSE
    res2 := 0
  END
  RETURN res2
END Write;

PROCEDURE Create*(FName: ARRAY OF CHAR): FSys.FS;
VAR F: FSys.FS; res2: INTEGER;
BEGIN
  NEW(F);
  IF F # NIL THEN
    F.subfunc := 2;
    F.pos := 0;
    F.hpos := 0;
    F.bytes := 0;
    F.buffer := 0;
    COPY(FName, F.name);
    IF KOSAPI.sysfunc22(70, sys.ADR(F^), res2) # 0 THEN
      DISPOSE(F)
    END
  END
  RETURN F
END Create;

END File.